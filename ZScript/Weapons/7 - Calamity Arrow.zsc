// The Calamity Arrow
// "Just make the BFG a gauss cannon then lol" - Matt Eldrydge
// Primary: Explosive railgun projectile.
// Secondary: Calamity Blade.
class CFB_CalamityArrow : CFB_Weapon replaces BFG9000
{
	int countdown;
	double charge; // i am a moron. this used to be an int, but now it's a double so it can be used properly in division
	double offsetStep; // iirc offsets can be decimals in zscript!
	double scaleStep;
	action void A_ChargeCalamityArrowPrimary()
	{
		A_OverlayPivot(OverlayID(), 0.5, 0);
		if (invoker.charge < 4)
		{
			invoker.countdown--;
			if (invoker.countdown <= 0)
			{
				if (invoker.DepleteAmmo(false))
				{
					invoker.charge++;
					invoker.countdown = 20;
					A_StartSound("weapons/calarrow/charge", CHAN_WEAPON);
				}
			}
		}
		A_Overlay(-2, "PrimaryFlash", true);
		let psp = player.FindPSprite(OverlayID());
		if (psp)
			psp.frame = 10+clamp(invoker.charge, 1,4);
	}
	action void A_ChargeCalamityArrowSecondary()
	{
		A_OverlayPivot(OverlayID(), 0.5, 0);
		if (invoker.charge < 5)
		{
			invoker.countdown--;
			if (invoker.countdown <= 0)
			{
				if (invoker.DepleteAmmo(false))
				{
					invoker.charge++;
					invoker.countdown = 20;
					A_StartSound("weapons/calarrow/charge", CHAN_WEAPON);
				}
			}
		}
		A_Overlay(-2, "SecondaryFlash", true);
	}
	action void A_FireCalamityArrowPrimary()
	{
		invoker.scaleStep = (invoker.charge)/50;
		A_OverlayScale(OverlayID(), 1+(invoker.scaleStep*5));
		invoker.offsetStep = ((invoker.charge)*4)/5;
		A_WeaponOffset(0, WEAPONTOP+(invoker.offsetStep*5));
		switch (invoker.charge)
		{
			case 1:
				A_FireProjectile("CFB_CalamityRail1", useammo: false);
				A_StartSound("weapons/calarrow/rail1fire");
				break;
			case 2:
				A_FireProjectile("CFB_CalamityRail2", useammo: false);
				A_StartSound("weapons/calarrow/rail2fire");
				break;
			case 3:
				A_FireProjectile("CFB_CalamityRail3", useammo: false);
				A_StartSound("weapons/calarrow/rail3fire");
				break;
			case 4:
				A_FireProjectile("CFB_CalamityRail4", useammo: false);
				A_StartSound("weapons/calarrow/rail4fire");
				break;
		}
		A_Overlay(-2, "PrimaryFlash.End");
	}
	action void A_FireCalamityArrowSecondary()
	{
		A_StartSound("weapons/calarrow/wavefire", CHAN_WEAPON);
		A_Overlay(-2, "SecondaryFlash.End");

		double angle = 5;
		switch (invoker.charge)
		{
		case 2:
			angle = 12.5;
			break;
		case 3:
			angle = 20;
			break;
		case 4:
			angle = 27.5;
			break;
		case 5:
			angle = 35;
			break;
		}

		// In Legacy of Rust vertical autoaim is completely disabled for Heatwave,
		// presumably to prevent situations where a part of the "wave" is autoaimed
		// and a part isn't (supposedly ugly?)
		// Here instead we calculate the autoaim-affected slope with BulletSlope()
		// and then just unconditinally apply it to all projectiles, so if they
		// do get autoaimed, they'll be autoaimed together:
		double projPitch = BulletSlope();
		for (double ang = -angle; ang <= angle; ang += 5.0)
		{
			// Since autoaim is handled manually, we'll need FPF_NOAUTOAIM:
			A_FireProjectile("CFB_CalamityWave", ang, useammo: false, flags: FPF_NOAUTOAIM, pitch: DeltaAngle(pitch, projPitch));
		}
		A_ClearRefire();
		A_OverlayScale(OverlayID(), 1+((invoker.charge)/5));
		A_WeaponOffset(0, WEAPONTOP+((invoker.charge)*2));
	}
	action void A_BackToNeutral()
	{
		let psp = player.FindPSprite(PSP_Weapon);
		if (psp)
		{
			A_OverlayScale(OverlayID(), psp.scale.y - invoker.scaleStep);
			A_WeaponOffset(0, psp.y - invoker.offsetStep);
		}
	}
	Default
	{
		+WEAPON.BFG
		+WEAPON.EXPLOSIVE
		+WEAPON.ALT_USES_BOTH
		//+WEAPON.AMMO_OPTIONAL
		//+WEAPON.NOAUTOFIRE
		Weapon.SlotNumber 7;
		Weapon.SelectionOrder 2800;
		Weapon.AmmoType "CFB_Cell";
		Weapon.AmmoUse 10;
		Weapon.AmmoGive 100;

		Tag "$TAG_CALAMITYARROW";
		// No Obituary defined here because this is a projectile weapon (and has two attacks)
		Inventory.PickupMessage "$GOTCALAMITYARROW";

		Weapon.UpSound "weapons/calarrow/draw";
		Inventory.PickupSound "weapons/calarrow/pickup";
		// No AttackSound defined here because this is a projectile weapon (and has two attacks)
	}
	States
	{
		Spawn:
			CARG Z -1;
			Stop;
		Select:
			TNT1 A 0 A_JumpIfNoAmmo("Select.Empty");
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			CARG A 1 A_Raise(18);
			Loop;
		Select.Empty:
			CARG B 1 A_Raise(18);
			Loop;
		Deselect:
			TNT1 A 0 A_Overlay(2, "StopSpinner");
			CARG # 1 A_Lower(18); // uses the latest frame, but disables the spinner for the sake of death
			Loop;
		Ready:
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			TNT1 A 0 A_JumpIfNoAmmo("Ready.Empty");
			CARG A 1 {
				A_WeaponReady();
				invoker.charge = 0;
			}
			Loop;
		Ready.Empty:
			TNT1 A 0 A_JumpIfInventory("CFB_Cell", 10, "Ready.Charging");
			TNT1 A 0 A_Overlay(2, "StopSpinner");
			CARG B 1 A_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY); // no firing. nooooo firing.
			Loop;
		Ready.Charging:
			TNT1 A 0 A_JumpIfNoAmmo("Ready.Empty");
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			CARG CDEFGHIJK 3;
			Goto Ready;
		Fire:
			CARG # 1 A_ChargeCalamityArrowPrimary();
			CARG # 0 
			{
				if (invoker.CheckAmmo(PrimaryFire, false))
				{
					A_ReFire();
				}
			}
			CARG M 1 A_JumpIf(invoker.charge < 3, 1); // An in-between frame that only makes sense if you have 2 or more charge
			CARG A 1 {
				A_FireCalamityArrowPrimary();
				invoker.charge = 0;
				invoker.countdown = 0;
			}
			CARG BB 1 A_Overlay(2, "StopSpinner");
			CARG BBBBB 1 A_BackToNeutral;
			CARG B 3;
			Goto Ready.Charging;
		AltFire:
			CARG A 1 A_ChargeCalamityArrowSecondary();
			TNT1 A 0 
			{
				if (invoker.CheckAmmo(AltFire, false))
				{
					A_ReFire();
				}
			}
			TNT1 A 0 A_Overlay(2, "StopSpinner");
			CARG M 1 A_FireCalamityArrowSecondary; // Has flash in SecondaryFlash.End
			CARG N 1;
			CARG O 5 {
				invoker.scaleStep = (invoker.charge)/100;
				A_OverlayScale(OverlayID(), 1+(invoker.scaleStep*5));
				invoker.offsetStep = ((invoker.charge)*4)/10;
				A_WeaponOffset(0, WEAPONTOP+(invoker.offsetStep*5));
				invoker.charge = 0;
				invoker.countdown = 0;
			}
			CARG NNNMM 1 A_BackToNeutral;
			CARG A 3;
			TNT1 A 0 A_ReFire;
			goto Ready;
		Spinner:
			CARL ABCDE 2;
			Loop;
		StopSpinner:
			Stop;
		PrimaryFlash:
			TNT1 A 0
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				return invoker.FindStateByString("PrimaryFlash.Charge"..clamp(invoker.charge, 1,4));
			}
		PrimaryFlash.Charge1:
			HETC A 6 bright;
			HETC BCD 5 bright;
			goto LightDone;
		PrimaryFlash.Charge2:
			HETC E 6 bright;
			HETC FGH 5 bright;
			goto LightDone;
		PrimaryFlash.Charge3:
			HETC I 6 bright;
			HETC JKL 5 bright;
			goto LightDone;
		PrimaryFlash.Charge4:
			HETC M 6 bright;
			HETC NOP 5 bright;
			goto LightDone;
		PrimaryFlash.End:
			CARF AB 1 Bright
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				A_AttachLightDef("Flash", "CFB_CalamityFlash");
			}
			TNT1 A 0 A_RemoveLight("Flash");
			Stop;
		SecondaryFlash:
			TNT1 A 0
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				return invoker.FindStateByString("SecondaryFlash.Charge"..clamp(invoker.charge, 1,5));
			}
		SecondaryFlash.Charge1:
			HETC A 6 bright;
			HETC BCD 5 bright;
			goto LightDone;
		SecondaryFlash.Charge2:
			HETC E 6 bright;
			HETC FGH 5 bright;
			goto LightDone;
		SecondaryFlash.Charge3:
			HETC I 6 bright;
			HETC JKL 5 bright;
			goto LightDone;
		SecondaryFlash.Charge4:
			HETC M 6 bright;
			HETC NOP 5 bright;
			goto LightDone;
		SecondaryFlash.Charge5:
			HETC Q 6 bright;
			HETC RST 5 bright;
			goto LightDone;
		SecondaryFlash.End:
			HETD A 3 bright
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				A_AttachLightDef("Flash", "CFB_CalamityFlash");
			}
			HETD B 5 bright;
			TNT1 A 0 A_RemoveLight("Flash");
			Stop;
	}
}

// =========================================================== //
// PROJECTILES (their own section because there's a lot of em)
// =========================================================== //
class CFB_CalamityRail1 : FastProjectile
{
	Default
	{
		+FORCEXYBILLBOARD
		+RIPPER
		+BRIGHT
		MissileType "CFB_CalamityRail1Trail";
		MissileHeight 8;
		Radius 5;
		Height 5;
		Speed 120;
		DamageFunction (50);
		RenderStyle "Add";
		Alpha 0.8;
		Translation "CFB_Calamity1";
		Obituary "$KILLCALAMITYARROWRAIL";
		Decal "CFB_RailScorch";
		DamageType "Rocket"; // Whatever you say, Tango.
	}
	States
	{
		Spawn:
			CRAI A 1;
			Loop;
		Death:
			CRAI ABCDEFG 1 A_FadeOut(0.1);
			Stop;
	}
}
class CFB_CalamityRail1Trail : Actor
{
	Default
	{
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
		+CANNOTPUSH
		+NODAMAGETHRUST
		+BRIGHT
		RenderStyle "Add";
		Alpha 0.8;
		Translation "CFB_Calamity1";
	}
	States
	{
		Spawn:
			CRAI AA 1;
			CRAI ABCDEFG 1 A_FadeOut(0.1);
			Stop;
	}
}

class CFB_CalamityRail2 : CFB_CalamityRail1
{
	Default
	{
		DamageFunction (75);
		Scale 1.25;
		MissileType "CFB_CalamityRail2Trail";
		Translation "CFB_Calamity2";
	}
	States
	{
		Death:
			TNT1 A 0 A_SpawnItemEx("CFB_CalamityRail2Explosion", flags: SXF_TRANSFERPOINTERS);
			Stop;
	}
}
class CFB_CalamityRail2Trail : CFB_CalamityRail1Trail
{
	Default
	{
		Scale 1.25;
		Translation "CFB_Calamity2";
	}
}
class CFB_CalamityRail2Explosion : Actor
{
	Default
	{
		+FORCEXYBILLBOARD
		+NOCLIP
		+NOINTERACTION
		+NOGRAVITY
		+NOBLOCKMAP
		+BRIGHT
		Scale 0.33;
		Height 1;
		ExplosionDamage 64;
		ExplosionRadius 96;
		RenderStyle "Add";
		Obituary "$KILLCALAMITYARROWEXPLOSION";
		DamageType "Rocket";
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_Explode();
				A_AttachLightDef("Light", "CFB_CalamityExplosion");
			}
			CEX0 ACEGIKMOQSUWY[] 1 {
				scale += default.scale/3.25;
				alpha -= default.alpha/15;
			}
			TNT1 A 0 A_RemoveLight("Light");
			Stop;
	}
}

class CFB_CalamityRail3 : CFB_CalamityRail1
{
	Default
	{
		DamageFunction (100);
		Scale 1.5;
		MissileType "CFB_CalamityRail3Trail";
		Translation "CFB_Calamity3";
	}
	States
	{
		Death:
			TNT1 A 0 A_SpawnItemEx("CFB_CalamityRail3Explosion", flags: SXF_TRANSFERPOINTERS);
			Stop;
	}
}
class CFB_CalamityRail3Trail : CFB_CalamityRail1Trail
{
	Default
	{
		Scale 1.5;
		Translation "CFB_Calamity3";
	}
}
class CFB_CalamityRail3Explosion : CFB_CalamityRail2Explosion
{
	Default
	{
		Scale 0.75;
		ExplosionDamage 128;
		ExplosionRadius 128;
	}
	States
	{
		Spawn:
			TNT1 A 0 NoDelay {
				A_Explode();
				A_AttachLightDef("Light", "CFB_CalamityExplosion");
			}
			CEX0 ACEGIKM 1 {
				scale += default.scale/7.5;
				alpha -= default.alpha/15;
			}
			TNT1 A 0 A_Explode;
			CEX0 OQSUWY[] 1 {
				scale += default.scale/7.5;
				alpha -= default.alpha/15;
			}
			TNT1 A 0 A_RemoveLight("Light");
			Stop;
	}
}

class CFB_CalamityRail4 : CFB_CalamityRail1
{
	Default
	{
		DamageFunction (125);
		Scale 1.75;
		MissileType "CFB_CalamityRail4Trail";
		Translation "CFB_Calamity4";
	}
	States
	{
		Death:
			TNT1 A 0 A_SpawnItemEx("CFB_CalamityRail4Explosion", flags: SXF_TRANSFERPOINTERS);
			Stop;
	}
}
class CFB_CalamityRail4Trail : CFB_CalamityRail1Trail
{
	Default
	{
		Scale 1.75;
		Translation "CFB_Calamity4";
	}
}
class CFB_CalamityRail4Explosion : CFB_CalamityRail3Explosion
{
	action void A_IdleScaleAlpha()
	{
		scale += default.scale/40;
		alpha -= default.alpha/30;
	}
	action void A_ResetAndExplode()
	{
		A_Explode();
		A_StartSound("weapons/calarrow/explode3");
		scale = default.scale;
		alpha = default.alpha;
	}
	Default
	{
		Scale 1;
	}
	States
	{ // loop four times
		Spawn:
			TNT1 A 0 NoDelay {
				A_Explode();
				A_AttachLightDef("Light", "CFB_CalamityExplosion");
			}
			CEX0 ABCD 1 A_IdleScaleAlpha;
			CEX0 E 1 A_ResetAndExplode;
			CEX0 FGHI 1 A_IdleScaleAlpha;
			CEX0 J 1 A_ResetAndExplode;
			CEX0 KLMN 1 A_IdleScaleAlpha;
			CEX0 O 1 A_ResetAndExplode;
			CEX0 PQRS 1 A_IdleScaleAlpha;
			CEX0 T 1 A_ResetAndExplode;
			CEX0 UVWX 1 A_IdleScaleAlpha;
			CEX0 Y 1 A_ResetAndExplode;
			CEX0 Z[\] 1 A_IdleScaleAlpha;
			CEX1 A 1 A_ResetAndExplode;
			CEX0 ABCD 1 A_IdleScaleAlpha;
			CEX0 E 1 A_ResetAndExplode;
			CEX0 FGHI 1 A_IdleScaleAlpha;
			CEX0 J 1 A_ResetAndExplode;
			CEX0 KLMN 1 A_IdleScaleAlpha;
			CEX0 O 1 A_ResetAndExplode;
			CEX0 PQRS 1 A_IdleScaleAlpha;
			CEX0 T 1 A_ResetAndExplode;
			CEX0 UVWX 1 A_IdleScaleAlpha;
			CEX0 Y 1 A_ResetAndExplode;
			CEX0 Z[\] 1 A_IdleScaleAlpha;
			CEX1 A 1 A_ResetAndExplode;
			CEX0 ABCDEFGHIJKLMNOPQRSTUVWXYZ[\] 1 A_IdleScaleAlpha;
			CEX1 A 1 A_IdleScaleAlpha;
			TNT1 A 0 A_RemoveLight("Light");
			Stop;
	}
}

class CFB_CalamityWave : Actor // Cheers, Ash.
{
	static const color partColors[] =
	{
		"006BC5",
		"00C3FE",
		"04ffff",
		"BFFFFF"
	};

	Default
	{
		Projectile;
		DamageFunction (10);
		Speed 20;
		Radius 16;
		Height 8;
		+RIPPER
		+BRIGHT
		RenderStyle 'Add';
		DamageType "Rocket"; // Whatever you say, Tango.
		Obituary "$KILLCALAMITYARROWWAVE";
		DeathSound "weapons/calarrow/wavecrash";
	}

	States {
	Spawn:
		TNT1 A 0 NoDelay A_FaceMovementDirection;
		CWAV AABBCC 1
		{
			FSpawnParticleParams p;
			p.lifetime = 11;
			p.size = 18;
			p.sizestep = -p.size / p.lifetime;
			p.style = STYLE_Add;
			p.flags = SPF_FULLBRIGHT;
			p.startalpha = alpha;
			p.fadestep = -1;
			p.pos.z = pos.z;
			double hofs = -15;
			double step = (abs(hofs)*2) / 4;
			for (double d = hofs; d <= -hofs; d += step)
			{
				p.color1 = partColors[ random[incin](0, partColors.Size()-1) ];
				Vector2 ofs = Actor.RotateVector((0, d), angle);
				p.pos.xy = level.Vec2Offset(pos.xy, ofs);
				level.SpawnParticle(p);
			}
		}
		loop;
	Death:
		TNT1 A 0
		{
			FSpawnParticleParams p;
			p.lifetime = frandom[incin](25, 35);
			p.size = 18;
			p.sizestep = -p.size / p.lifetime;
			p.style = STYLE_Add;
			p.flags = SPF_FULLBRIGHT;
			p.startalpha = alpha;
			p.fadestep = -1;
			p.pos.z = pos.z;
			double hofs = -15;
			double step = (abs(hofs)*2) / 4;
			for (double d = hofs; d <= -hofs; d += step)
			{
				p.color1 = partColors[ random[incin](0, partColors.Size()-1) ];
				Vector2 ofs = Actor.RotateVector((0, d), angle);
				p.pos.xy = level.Vec2Offset(pos.xy, ofs);
				for (int i = 0; i < 2; i++)
				{
					p.vel = (0, 0, frandom[incin](2.5, 4.5)) * randompick[incin](-1, 1);
					p.accel.z = (-p.vel.z / p.lifetime);
					level.SpawnParticle(p);
				}
			}
		}
		CWAV DEFGHI 3 A_FadeOut(0.16);
		stop;
	}
}