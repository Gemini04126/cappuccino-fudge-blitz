// The Calamity Arrow
// "Just make the BFG a gauss cannon then lol" - Matt Eldrydge
// Primary: Explosive railgun projectile.
// Secondary: Calamity Blade.
class CFB_CalamityArrow : CFB_Weapon replaces BFG9000
{
	int charge;
	double offsetStep; // iirc offsets can be decimals in zscript!
	double scaleStep;
	action void A_ChargeCalamityArrowPrimary()
	{
		invoker.charge++;
		let psp = player.FindPSprite(OverlayID());
		if (psp)
		{
			if (invoker.charge < 2)
				psp.frame = 0;
			else
				psp.frame = 9+clamp(invoker.charge, 2,4);
		}
	}
	action void A_FireCalamityArrowPrimary()
	{
		switch (invoker.charge)
		{
			case 1:
				A_FireProjectile("CFB_CalamityArrowRail1", useammo: false);
				A_OverlayScale(OverlayID(), 1.1);
				invoker.scaleStep = -0.02;
				A_WeaponOffset(0, 4, WOF_ADD);
				invoker.offsetStep = -0.8;
				break;
			case 2:
				A_FireProjectile("CFB_CalamityArrowRail2", useammo: false);
				A_OverlayScale(OverlayID(), 1.2);
				invoker.scaleStep = -0.04;
				A_WeaponOffset(0, 8, WOF_ADD);
				invoker.offsetStep = -1.6;
				break;
			case 3:
				A_FireProjectile("CFB_CalamityArrowRail3", useammo: false);
				A_OverlayScale(OverlayID(), 1.3);
				invoker.scaleStep = -0.06;
				A_WeaponOffset(0, 12, WOF_ADD);
				invoker.offsetStep = -2.4;
				break;
			case 4:
				A_FireProjectile("CFB_CalamityArrowRail4", useammo: false);
				A_OverlayScale(OverlayID(), 1.4);
				invoker.scaleStep = -0.08;
				A_WeaponOffset(0, 16, WOF_ADD);
				invoker.offsetStep = -3.2;
				break;
		}
	}
	action void A_FireWaves()
	{
		A_StartSound("DoomRR/heatwave/fire", CHAN_WEAPON);
		A_Overlay(-2, "SecondaryFlash.End");

		double angle = 5;
		switch (invoker.charge)
		{
		case 2:
			angle = 12.5;
			break;
		case 3:
			angle = 20;
			break;
		case 4:
			angle = 27.5;
			break;
		case 5:
			angle = 35;
			break;
		}

		// In Legacy of Rust vertical autoaim is completely disabled for Heatwave,
		// presumably to prevent situations where a part of the "wave" is autoaimed
		// and a part isn't (supposedly ugly?)
		// Here instead we calculate the autoaim-affected slope with BulletSlope()
		// and then just unconditinally apply it to all projectiles, so if they
		// do get autoaimed, they'll be autoaimed together:
		double projPitch = BulletSlope();
		for (double ang = -angle; ang <= angle; ang += 5.0)
		{
			// Since autoaim is handled manually, we'll need FPF_NOAUTOAIM:
			// CFB_CalamityArrowWave
			A_FireProjectile("CFB_PlasmaBall", ang, useammo: false, flags: FPF_NOAUTOAIM, pitch: DeltaAngle(pitch, projPitch));
		}

		invoker.charge = 0;
		A_ClearRefire();
	}
	Default
	{
		+WEAPON.BFG
		+WEAPON.ALT_USES_BOTH
		//+WEAPON.NOAUTOFIRE
		Weapon.SlotNumber 7;
		Weapon.SelectionOrder 2800;
		Weapon.AmmoType "CFB_Cell";
		Weapon.AmmoUse 10;
		Weapon.AmmoGive 100;

		Tag "$TAG_CALAMITYARROW";
		// No Obituary defined here because this is a projectile weapon (and has two attacks)
		Inventory.PickupMessage "$GOTCALAMITYARROW";

		//Weapon.UpSound "";
		//Inventory.PickupSound "";
		// No AttackSound defined here because this is a projectile weapon (and has two attacks)
	}
	States
	{
		Spawn:
			CARG Z -1;
			Stop;
		Select:
			TNT1 A 0 A_JumpIfNoAmmo("Select.Empty");
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			CARG A 1 A_Raise(18);
			Loop;
		Select.Empty:
			CARG B 1 A_Raise(18);
			Loop;
		Deselect:
			CARG # 1 A_Lower(18); // uses the latest frame
			Loop;
		Ready:
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			TNT1 A 0 A_JumpIfNoAmmo("Ready.Empty");
			CARG A 1 {
				A_WeaponReady();
				invoker.charge = 0;
			}
			Loop;
		Ready.Empty:
			TNT1 A 0 A_JumpIfInventory("CFB_Cell", 10, "Ready.Charging");
			TNT1 A 0 A_Overlay(2, "StopSpinner");
			CARG B 1 A_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY); // no firing. nooooo firing.
			Loop;
		Ready.Charging:
			TNT1 A 0 A_JumpIfNoAmmo("Ready.Empty");
			TNT1 A 0 A_Overlay(2, "Spinner", true);
			CARG CDEFGHIJK 3/* A_WeaponReady(WRF_NOPRIMARY|WRF_NOSECONDARY|WRF_NOSWITCH)*/;
			Goto Ready;
		Fire:
			CARG # 20
			{
				if (invoker.DepleteAmmo(false))
				{
					A_ChargeCalamityArrowPrimary();
					A_Overlay(-2, "PrimaryFlash");
					A_StartSound("DoomRR/heatwave/charge", CHAN_WEAPON);
				}
			}
			CARG # 0 
			{
				if (invoker.charge < 4 && invoker.CheckAmmo(PrimaryFire, false))
				{
					A_ReFire();
				}
			}
			CARG M 1 A_JumpIf(invoker.charge < 2, 1);
			CARG A 1 {
				A_OverlayPivot(OverlayID(), 0.5, 0);
				A_FireCalamityArrowPrimary();
				A_Overlay(-2, "PrimaryFlash.End");
			}
			CARG BB 1 A_Overlay(2, "StopSpinner");
			CARG BBBBB 1 {
				A_OverlayScale(OverlayID(), invoker.scaleStep, flags: WOF_ADD); // i hate interpolation
				A_WeaponOffset(0, invoker.offsetStep, WOF_ADD); // x2
			}
			CARG B 3;
			Goto Ready.Charging;
		AltFire:
			CARG A 20
			{
				if (invoker.DepleteAmmo(false))
				{
					invoker.charge++;
					A_Overlay(-2, "SecondaryFlash");
					A_StartSound("DoomRR/heatwave/charge", CHAN_WEAPON);
				}
			}
			TNT1 A 0 
			{
				if (invoker.charge < 5 && invoker.CheckAmmo(PrimaryFire, false))
				{
					A_ReFire();
				}
			}
			CARG A 3 A_FireWaves; // Has flash in SecondaryFlash.End
			CARG N 5;
			CARG NML 4;
			TNT1 A 0 A_ReFire;
			goto Ready;
		Spinner:
			CARL ABCDE 2;
			Loop;
		StopSpinner:
			Stop;
		PrimaryFlash:
			TNT1 A 0
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				return invoker.FindStateByString("PrimaryFlash.Charge"..clamp(invoker.charge, 1,4));
			}
		PrimaryFlash.Charge1:
			HETC A 6 bright;
			HETC BCD 5 bright;
			goto LightDone;
		PrimaryFlash.Charge2:
			HETC E 6 bright;
			HETC FGH 5 bright;
			goto LightDone;
		PrimaryFlash.Charge3:
			HETC I 6 bright;
			HETC JKL 5 bright;
			goto LightDone;
		PrimaryFlash.Charge4:
			HETC M 6 bright;
			HETC NOP 5 bright;
			goto LightDone;
		PrimaryFlash.End:
			CARF AB 1;
			Stop;
		SecondaryFlash:
			TNT1 A 0
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				return invoker.FindStateByString("SecondaryFlash.Charge"..clamp(invoker.charge, 1,5));
			}
		SecondaryFlash.Charge1:
			HETC A 6 bright;
			HETC BCD 5 bright;
			goto LightDone;
		SecondaryFlash.Charge2:
			HETC E 6 bright;
			HETC FGH 5 bright;
			goto LightDone;
		SecondaryFlash.Charge3:
			HETC I 6 bright;
			HETC JKL 5 bright;
			goto LightDone;
		SecondaryFlash.Charge4:
			HETC M 6 bright;
			HETC NOP 5 bright;
			goto LightDone;
		SecondaryFlash.Charge5:
			HETC Q 6 bright;
			HETC RST 5 bright;
			goto LightDone;
		SecondaryFlash.End:
			HETD A 3 bright
			{
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
				A_Light1();
			}
			HETD B 5 bright A_Light2;
			goto LightDone;
	}
}

// =========================================================== //
// PROJECTILES (their own section because there's a lot of em)
// =========================================================== //
class CFB_CalamityArrowRail1 : FastProjectile
{
	Default
	{
		+RIPPER
		MissileType "CFB_CalamityArrowRail1Trail";
		MissileHeight 8;
		Radius 5;
		Height 5;
		Speed 120;
		DamageFunction (200);
		RenderStyle "Add";
		Alpha 0.8;
		Translation "CFB_Calamity1";
		DamageType "Bullet"; // Explosion has DamageType "Rocket"
	}
	States
	{
		Spawn:
			CARP A 1;
			Loop;
	}
}
class CFB_CalamityArrowRail1Trail : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
		+CANNOTPUSH
		+NODAMAGETHRUST
		RenderStyle "Add";
		Alpha 0.8;
		Translation "CFB_Calamity1";
	}
	States
	{
		Spawn:
			CARP AA 1;
			CARP ABCDEFG 1 A_FadeOut(0.1);
			Stop;
	}
}

class CFB_CalamityArrowRail2 : CFB_CalamityArrowRail1
{
	Default
	{
		Scale 1.25;
		MissileType "CFB_CalamityArrowRail2Trail";
		Translation "CFB_Calamity2";
	}
}
class CFB_CalamityArrowRail2Trail : CFB_CalamityArrowRail1Trail
{
	Default
	{
		Scale 1.25;
		Translation "CFB_Calamity2";
	}
}

class CFB_CalamityArrowRail3 : CFB_CalamityArrowRail1
{
	Default
	{
		Scale 1.5;
		MissileType "CFB_CalamityArrowRail3Trail";
		Translation "CFB_Calamity3";
	}
}
class CFB_CalamityArrowRail3Trail : CFB_CalamityArrowRail1Trail
{
	Default
	{
		Scale 1.5;
		Translation "CFB_Calamity3";
	}
}

class CFB_CalamityArrowRail4 : CFB_CalamityArrowRail1
{
	Default
	{
		Scale 1.75;
		MissileType "CFB_CalamityArrowRail4Trail";
		Translation "CFB_Calamity4";
	}
}
class CFB_CalamityArrowRail4Trail : CFB_CalamityArrowRail1Trail
{
	Default
	{
		Scale 1.75;
		Translation "CFB_Calamity4";
	}
}