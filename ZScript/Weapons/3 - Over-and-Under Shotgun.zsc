// Over-and-Under Shotgun
// Batandy's favorite(?) double-barreled shotgun.
// Deals the same damage as the normal shotgun, but fires 10 pellets per barrel instead of 7.
// Can alt-fire to fire one barrel at a time, starting with the top.
class CFB_OUShotgunAmmo : Ammo
{
	Default
	{
		Inventory.Icon "OUSGY0"; // Replace later
		Inventory.Amount 0;
		Inventory.MaxAmount 2;
		Ammo.BackpackAmount 0;
		Ammo.BackpackMaxAmount 2;
		+INVENTORY.IGNORESKILL
	}
}
class CFB_OUShotgun : CFB_Weapon replaces SuperShotgun
{
	action void A_AltFireOUShotgun()
	{
		A_OverlayPivot(OverlayID(), 0.56, 0.5);
		A_StartSound("weapons/oushotgun/single", CHAN_WEAPON);
		A_FireBullets(4.75, 3.725, 10, 13, "CFB_ShotgunPuff", FBF_NORANDOM, missile: "CFB_BulletTracer", -2.5);
		A_GunFlash();
		A_OverlayScale(OverlayID(), 1.1);
	}
	Default
	{
		+WEAPON.AMMO_OPTIONAL
		Weapon.SlotNumber 3;
		Weapon.AmmoType1 "CFB_OUShotgunAmmo";
		Weapon.AmmoUse1 1;
		Weapon.AmmoGive1 0;
		Weapon.AmmoType2 "CFB_Shells";
		Weapon.AmmoUse2 0;
		Weapon.AmmoGive2 8;

		Tag "$TAG_OUSHOTGUN";
		Obituary "$KILLOUSHOTGUN";
		Inventory.PickupMessage "$GOTOUSHOTGUN";

		Weapon.UpSound "weapons/oushotgun/draw";
		Inventory.PickupSound "weapons/oushotgun/pickup";
		// No AttackSound because it's different for primary and altfires
	}
	States
	{
		Spawn:
			OUSG Z -1;
			Stop;
		Select:
			TNT1 A 0 A_QuickRaise();
			OUSG X 1 A_WeaponOffset(90, 122, WOF_INTERPOLATE);
			OUSG X 1 A_WeaponOffset(60, 92, WOF_INTERPOLATE);
			OUSG X 1 A_WeaponOffset(40, 72, WOF_INTERPOLATE);
			OUSG W 1 A_WeaponOffset(20, 52, WOF_INTERPOLATE);
			OUSG V 1 A_WeaponOffset(10, 42, WOF_INTERPOLATE);
			OUSG A 1 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
			Goto Ready;
		Deselect:
			OUSG A 1 A_WeaponOffset(0, 32, WOF_INTERPOLATE);
			OUSG V 1 A_WeaponOffset(10, 42, WOF_INTERPOLATE);
			OUSG W 1 A_WeaponOffset(20, 52, WOF_INTERPOLATE);
			OUSG X 1 A_WeaponOffset(40, 72, WOF_INTERPOLATE);
			OUSG X 1 A_WeaponOffset(60, 92, WOF_INTERPOLATE);
			OUSG X 1 A_WeaponOffset(90, 122, WOF_INTERPOLATE);
			TNT1 A 0 A_WeaponOffset(0, 32);
			TNT1 A 0 A_QuickLower();
			Stop;
		Ready:
			OUSG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount <= 0, "Fire.Empty");
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount == 1, "AltFire");
			OUSF A 1 Bright {
				invoker.DepleteAmmo(false, true); // If I can't just pass 2 to it without passing true to forceammouse...
				invoker.DepleteAmmo(false, true); // ...just do it twice~
				A_OverlayPivot(OverlayID(), 0.56, 0.5);
				A_StartSound("weapons/oushotgun/double", CHAN_WEAPON);
				A_FireBullets(4.75, 7.45, 20, 13, "CFB_ShotgunPuff", FBF_NORANDOM, missile: "CFB_BulletTracer", -2.5);
				A_GunFlash();
				A_OverlayScale(OverlayID(), 1.2);
			}
			OUSF B 1 Bright A_OverlayScale(OverlayID(), 1.6);
			OUSF C 2 A_OverlayScale(OverlayID(), 1.8);
			OUSF D 2 A_OverlayScale(OverlayID(), 1.4);
			OUSF E 2 A_OverlayScale(OverlayID(), 1.2);
			OUSG A 2 A_OverlayScale(OverlayID(), 1.0);
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount <= 0 && invoker.ammo2.Amount >= 1, "Reload");
			OUSG A 2 A_ReFire;
			Goto Ready;
		Fire.Empty:
			TNT1 A 0 A_JumpIf(invoker.ammo2.Amount >= 1, "Reload");
			OUSF L 3 {
				A_StartSound("weapons/empty");
				A_OverlayPivot(OverlayID(), 0.56, 0.5);
				A_OverlayScale(OverlayID(), 1.1);
			}
			OUSG A 9 A_OverlayScale(OverlayID(), 1.0);
			Goto Ready;
		AltFire:
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount <= 0, "Fire.Empty");
			TNT1 A 0 {invoker.DepleteAmmo(false, true, 1);}
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount % 2 == 0, "AltFire.Bottom"); // technically top first, but since we deplete before the shot is fired...
			Goto AltFire.Top;
		AltFire.Top:
			OUSF F 1 Bright A_AltFireOUShotgun;
			OUSF G 1 Bright A_OverlayScale(OverlayID(), 1.3);
			Goto AltFire.Finish;
		AltFire.Bottom:
			OUSF H 1 Bright A_AltFireOUShotgun;
			OUSF I 1 Bright A_OverlayScale(OverlayID(), 1.3);
			Goto AltFire.Finish;
		AltFire.Finish:
			OUSF J 2 A_OverlayScale(OverlayID(), 1.4);
			OUSF K 2 A_OverlayScale(OverlayID(), 1.2);
			OUSF L 2 A_OverlayScale(OverlayID(), 1.1);
			OUSG A 2 A_OverlayScale(OverlayID(), 1.0);
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount <= 0 && invoker.ammo2.Amount >= 1, "Reload");
			Goto Ready;
		Flash:
			TNT1 A 2 A_AttachLightDef("Flash", "CFB_GunFlash");
			TNT1 A 0 A_RemoveLight("Flash");
			Stop;
		Reload:
			OUSG BCDEFGHI 2;
			TNT1 A 0 A_JumpIf(invoker.ammo1.Amount < invoker.ammo1.MaxAmount/2, "Reload.Empty");
			TNT1 A 0 A_JumpIf((invoker.ammo1.Amount >= invoker.ammo1.MaxAmount/2) && (invoker.ammo1.Amount < invoker.ammo1.MaxAmount), "Reload.Half");
			OUSR A 12 A_StartSound("weapons/oushotgun/open", CHAN_AUTO);
			Goto Reload.Finished;

		Reload.Half:
			OUSR B 8 A_StartSound("weapons/oushotgun/open", CHAN_AUTO);
			OUSR LM 2;
			OUSR J 2;
		Reload.Half.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("CFB_OUShotgunAmmo", invoker.ammo1.MaxAmount, "Reload.All.Finished");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("CFB_Shells", 1, 1);
			Goto Reload.Finished; // > half, < full
			TNT1 A 0 {
				A_GiveInventory("CFB_OUShotgunAmmo", 1);
				A_Takeinventory("CFB_Shells",1);
			}
			Goto Reload.Half.Repeat;

		Reload.Empty:
			OUSR C 8 A_StartSound("weapons/oushotgun/open", CHAN_AUTO);
			OUSR DEF 2;
		Reload.Empty.Part1.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("CFB_OUShotgunAmmo", invoker.ammo1.MaxAmount/2, "Reload.Empty.Part2");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIf(invoker.ammo2.Amount >= 1, 1);
			Goto Reload.Finished;
			TNT1 A 0 {
				A_GiveInventory("CFB_OUShotgunAmmo", 1);
				A_Takeinventory("CFB_Shells",1);
			}
			Goto Reload.Empty.Part1.Repeat;
		Reload.Empty.Part2:
			TNT1 A 0 A_StartSound("weapons/oushotgun/load", CHAN_AUTO);
			TNT1 A 0 A_JumpIf(invoker.ammo2.Amount < 1, "Reload.Finished.One.Left");
			OUSR G 2 Offset(2,34);
			OUSR G 2 Offset(5,38);
			OUSR G 1 Offset(2,34);
			OUSR G 1 Offset(1,33);
			OUSR HI 2;
			OUSR J 2;
		Reload.Empty.Part2.Repeat:
			// if full on ammo, finish reload
			TNT1 A 0 A_JumpIfInventory("CFB_OUShotgunAmmo", invoker.ammo1.MaxAmount, "Reload.All.Finished");
			// if at least 1 shell to load, continue
			TNT1 A 0 A_JumpIfInventory("CFB_Shells", 1, 1);
			Goto Reload.Finished;
			TNT1 A 0 {
				A_GiveInventory("CFB_OUShotgunAmmo", 1);
				A_Takeinventory("CFB_Shells",1);
			}
			Goto Reload.Empty.Part2.Repeat;
		Reload.All.Finished:
			OUSR A 0 A_StartSound("weapons/oushotgun/load", CHAN_AUTO);
			OUSR K 2 Offset(4,36);
			OUSR KKK 2 A_WeaponOffset(14,20,WOF_ADD);
			TNT1 A 4 A_WeaponOffset(0,32);
			Goto Reload.Finished;

		Reload.Finished.One.Left:
			OUSR G 2 Offset(4,36);
			OUSR GGG 2 A_WeaponOffset(14,20,WOF_ADD);
			TNT1 A 4 A_WeaponOffset(0,32);
			Goto Reload.Finished;

		Reload.Finished:
			OUSG I 2;
			OUSG H 2 A_StartSound("weapons/oushotgun/close", CHAN_AUTO);
			OUSG GJKA 2;
			Goto Ready;
	}
}